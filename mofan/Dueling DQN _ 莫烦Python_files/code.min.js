var cms=[];var pyodideReadyPromise;var totalTextareaNum;function addToOutput(div,s){div.innerText+=s+'\n';}
function sleep(ms){return new Promise(resolve=>setTimeout(resolve,ms));}
async function runPythonAsync(code,btn,messageCallback,errorCallback){let pyodide=await pyodideReadyPromise;btn.textContent="Downloading packages...";await pyodide.loadPackagesFromImports(code,messageCallback,errorCallback);btn.textContent="Running...";var coroutine=pyodide.pyodide_py.eval_code_async(code,pyodide.globals);try{return await coroutine;}finally{coroutine.destroy();}}
async function evaluatePython(btn){let pyodide=await pyodideReadyPromise;const myId=btn.id.split("-")[1];const txDiv=document.getElementById("scriptOutput-"+myId);txDiv.innerText="";btn.disabled=true;const img=document.getElementById("scriptImage-"+myId);img.removeAttribute("src");img.classList.remove("course-image");const preCode=`
sys.stdout = sys.stderr = io.StringIO()
`;const userCode=cms[parseInt(myId)].getValue();const postCode=`
import sys, io, base64
__oString = sys.stdout.getvalue()
def main():
    if "matplotlib" not in sys.modules:
        return 
    import matplotlib.pyplot as plt
    if len(plt.get_fignums()) == 0:
        return 
    with io.BytesIO() as buf:
        plt.savefig(buf, format='png', bbox_inches="tight")
        buf.seek(0)
        _img_str = 'data:image/png;base64,' + base64.b64encode(buf.read()).decode('UTF-8')
    plt.clf()
    plt.close()
    return _img_str
__plt_tmp_img_str = main()
`;try{btn.textContent="Downloading packages...";await pyodide.loadPackagesFromImports(userCode);btn.textContent="Running...";const inputsName=document.getElementsByClassName("scriptDataInputName");const inputsValue=document.getElementsByClassName("scriptDataInputValue");var inputsDict={};if(inputsName.length>0){for(var i=0;i<inputsName.length;i++){const key=inputsName[i].value.toString().trim();if(key===""){continue;}
if(key in inputsDict){alert(key+" 已存在！");break;}
inputsDict[key]=inputsValue[i].value.toString();}}
if(Object.keys(inputsDict).length>0){pyodide.globals.set("mofanpy",pyodide.toPy(inputsDict));}
var r=await pyodide.runPythonAsync(preCode+userCode);if(r===undefined){r="";}
await pyodide.runPythonAsync(postCode);const oString=pyodide.globals.get("__oString");txDiv.style.display="block";txDiv.innerText="";addToOutput(txDiv,oString+r);if(pyodide.globals.get("__plt_tmp_img_str")!==undefined){img.classList.add("course-image");img.src=pyodide.globals.get("__plt_tmp_img_str");pyodide.globals.set("__plt_tmp_img_str",null);}}catch(err){txDiv.style.display="block";txDiv.innerText="";let oString=pyodide.runPython("sys.stdout.getvalue()");oString+="\n"+err.message;addToOutput(txDiv,oString);}
btn.disabled=false;btn.innerText="Run";}
function getAllHints(e){var hints=CodeMirror.pythonHint(e);var anyHints=CodeMirror.hint.anyword(e);anyHints.list.forEach(function(hint){if(hints.list.indexOf(hint)===-1)
hints.list.push(hint);});hints.list.sort();if(hints){CodeMirror.on(hints,"pick",function(word){if(word.charAt(word.length-1)===")"){editor.execCommand("goCharLeft");}});}
return hints;}
function showAllHints(editor){editor.showHint({hint:getAllHints,completeSingle:false});}
function setEditor(myTextArea,onInteractivePage){let editor=CodeMirror.fromTextArea(myTextArea,{value:myTextArea.value,mode:{name:"python",version:3},keyMap:'sublime',theme:"darcula",lineNumbers:true,smartIndent:true,indentUnit:4,lineWrapping:false,readOnly:!onInteractivePage,matchBrackets:true,autoCloseBrackets:true,styleActiveLine:true,autofocus:false,foldGutter:true,gutters:["CodeMirror-linenumbers","CodeMirror-foldgutter","CodeMirror-lint-markers"]});editor.setOption("extraKeys",{Tab:function(cm){var spaces=Array(cm.getOption("indentUnit")+1).join(" ");cm.replaceSelection(spaces);}});editor.on('inputRead',function onChange(editor,input){if(input.text[0]===";"||input.text[0]===" "||input.text[0]===":"){return;}
showAllHints(editor);});cms.push(editor);}
function rmCodeArea(btn){$("#"+btn.id).parent().parent().remove();}
function addCodeArea(btn){const tx=$('<textarea>',{class:"scriptInput"});const rb=$('<button>',{class:"userSubmitBtn scriptRunBtn",id:"scriptRunBtn-"+totalTextareaNum}).css("display","inline-block").text("Run").bind("click",function(){evaluatePython(this);});const ab=$('<button>',{class:"userSubmitBtn scriptAddBtn",id:"scriptAddBtn-"+totalTextareaNum}).css("display","inline-block").text("+").bind("click",function(){addCodeArea(this);});const rmb=$('<button>',{class:"userSubmitBtn scriptRmBtn",id:"scriptRmBtn-"+totalTextareaNum}).css("display","inline-block").text("-").bind("click",function(){rmCodeArea(this);});const so=$('<div>',{class:"scriptOutput",id:"scriptOutput-"+totalTextareaNum});const im=$('<img>',{class:"scriptImage",id:"scriptImage-"+totalTextareaNum});const codeArea=$("<div>").append(tx,$("<div>").append(rb,ab,rmb),so,im);const p=$("#"+btn.id).parent().parent();codeArea.insertAfter(p);setEditor(tx[0],true);totalTextareaNum+=1;}
async function setCodeArea(onInteractivePage,dependencies,preCode,pyodideFullUrl){if(onInteractivePage===undefined){onInteractivePage=false;}
const myTextAreas=document.getElementsByClassName("scriptInput");const outputs=document.getElementsByClassName("scriptOutput");const imgs=document.getElementsByClassName("scriptImage");const runBtns=document.getElementsByClassName("scriptRunBtn");const addBtns=document.getElementsByClassName("scriptAddBtn");totalTextareaNum=myTextAreas.length;for(let i=0;i<totalTextareaNum;i++){outputs[i].id="scriptOutput-"+i;imgs[i].id="scriptImage-"+i;runBtns[i].id="scriptRunBtn-"+i;if(addBtns.length>i){addBtns[i].id="scriptAddBtn-"+i;}
setEditor(myTextAreas[i],onInteractivePage);}
if(onInteractivePage){if(dependencies===undefined){dependencies=[];}
for(let i=0;i<runBtns.length;i++){runBtns[i].innerText="准备中...\n";runBtns[i].style.display="inline-block";if(addBtns.length>i){addBtns[i].innerText="+";addBtns[i].style.display="inline-block";}}
async function loadPyodideAndPackages(){var pyodide=await loadPyodide({indexURL:pyodideFullUrl});await pyodide.loadPackage(dependencies);pyodide.runPython(`import sys;import io;sys.stdout = io.StringIO()\n${preCode}`);for(let i=0;i<runBtns.length;i++){runBtns[i].innerText='Run';runBtns[i].disabled=false;if(addBtns.length>i){addBtns[i].disabled=false;}}
return pyodide;}
pyodideReadyPromise=loadPyodideAndPackages();}}